
name: CVE scanning and blocking 

on:
    push:
        branches:
            - main
            - CVE-branch-  
    pull_request:
    
jobs:
    build-image:
        name: Building Image
        runs-on: Ubuntu-latest

        permissions:
            contents: read
            security-events: write 

        steps:

            - name: Checkout Git Repo
              uses: actions/checkout@v4 

            - name: Setting up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Setting up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and export
              uses: docker/build-push-action@v6
              with:
                push: false
                load: true
                tags: ${{ github.run_id }}
                # target: test
                cache-from: type=gha
                cache-to: type=gha,mode=max
                platforms: linux/amd64

            # CVE scanning of image
            - name: Run Trivy for all CVEs (non-blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ github.run_id }}
                format: table 
                exit-code: 0
                
            - name: Run Trivy for HIGH, CRITICAL CVEs and report (blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ github.run_id }}
                exit-code: 1
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'HIGH,CRITICAL'
                format: 'sarif'
                output: 'trivy-results.sarif'

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: 'trivy-results.sarif'     
              
            # step before building to add tags and metadata 
            - name: Metadata and Dynamic tags
              id: docker_metadata
              uses: docker/metadata-action@v5
              with:
                images: wvrmhat/httpenv
                flavor: |
                    latest=false
                tags: |
                    type=raw,value=06
                    # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
                    # type=ref,event=pr
                    # type=ref,event=branch
                    # type=semver,pattern={{version}} 
              
            
            # for building and pushing to docker hub
            - name: Docker build and push
              uses: docker/build-push-action@v6
              with: 
                push: true
                tags: ${{ steps.docker_metadata.outputs.tags }}
                labels: ${{ steps.docker_metadata.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha, mode=max

                # default is linux/amd64 (the OS of the runner) but you can add more
                # adding linux/arm64 is recommended for Apple Silicon, Raspberry Pi, AWS Graviton, etc.
                # linux/arm/v7 is for 32-bit ARM devices like Raspberry Pi 2/3
                platforms: linux/amd64,linux/arm64

            # Adding github comments step  
            - name: Finding comment of image tags
              uses: peter-evans/find-comment@v3
              if: github.event_name == 'pull_request'
              id: fc
              with: 
                issue-number: ${{ github.event.pull_request.number }}
                comment-author: 'github-actions[bot]'
                body-includes: Docker image tag(s) pushed

            - name: Create or update comment for image tags
              uses: peter-evans/create-or-update-comment@v4
              if: github.event_name == 'pull_request'
              with: 
                comment-id: ${{ steps.fc.outputs.comment-id }}
                issue-number: ${{ github.event.pull_request.number }}
                body: |
                  Docker image tag(s) pushed:
                    ```
                    text
                    ${{ steps.docker_metadata.outputs.tags }}
                    ```
                    Labels added to images:
                        ```
                        text
                        ${{ steps.docker_metadata.outputs.labels }}
                        ```
                edit-mode: replace 
